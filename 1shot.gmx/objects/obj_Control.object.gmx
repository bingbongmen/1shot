<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variable inits
globalvar gamepad0Connected, gamepad1Connected, roundTime, gameStart, p1Point, p2Point, player1Shot, player2Shot, player1Ready, player2Ready levelNumber, p1Score, didP1Score, p2Score, didP2Score, menuOption, pointsToWin, lightingOn, shakeOn, levelSelect, cameraTarget;
player1Shot = 0;
player2Shot = 0;
player1Ready = 0;
player2Ready = 0;
p1Point = 0;
p2Point = 0;
p1Score = 0;
didP1Score = 0;
p2Score = 0;
didP2Score = 0;
levelNumber = 0;
gameStart = 0;
menuOption = 0;
minMenuOptions = 0; //always 0
maxMenuOptions = 6;
pointsToWin = 3;
lightingOn = 0;
shakeOn = 0;
roundTime = 0;
gamepad0Connected = 0;
gamepad1Connected = 0;
levelSelect = 1;
cameraTarget = obj_Control;
timer = ds_list_create();
ds_list_add(timer,-1);
ds_list_add(timer,-1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;ds_list_size(timer); i++)
{
    if(timer[| i]&gt;0)
    {
        timer[| i] -= delta_time;
        if(timer[| i]&lt;0)
        {
            timer[| i] = 0;
        }
    }
}
if (timer[| 1]==0)
{
if(gameStart = 1){
    gameStart = 0;
    player1Ready = 0;
    player2Ready = 0;
}
timer[| 1]= -1;
}
if (timer[| 0]==0)
{
if((player1Ready = 1) &amp;&amp; (player2Ready = 1)){
    instance_create(x,y,obj_levelRules);
}
timer[| 0]= -1;
}

//init
if(room = rm_Create){
    room_goto(rm_Lobby);
}


roundTime = timer[| 1]/1000000;

//player win check and treating
if(levelNumber != 0){
    if((p1Score &gt;= pointsToWin) &amp;&amp; ((gamepad_button_check_pressed(0, gp_shoulderrb)) || (gamepad_button_check_pressed(0, gp_shoulderlb)))){
        p1Score = 0;
        p2Score = 0;
        levelNumber = 0;
        obj_Player1.x = 864
        obj_Player1.y = 160
        obj_Player2.x = 864
        obj_Player2.y = 896
        room_goto(rm_Lobby);        
    }
    if((p2Score &gt;= pointsToWin) &amp;&amp; ((gamepad_button_check_pressed(1, gp_shoulderrb)) || (gamepad_button_check_pressed(1, gp_shoulderlb)))){
        p1Score = 0;
        p2Score = 0;
        obj_Player1.x = 864
        obj_Player1.y = 160
        obj_Player2.x = 864
        obj_Player2.y = 896
        levelNumber = 0;
        room_goto(rm_Lobby);
    }
}
//Menu button selection var
if(levelNumber = 0){
    //gamepad connected checks
    if(gamepad_is_connected(0)){
        gamepad0Connected = 1;
        gamepad_set_axis_deadzone(0, 0.25)
    }
    else{
        gamepad0Connected = 0;
    }
    if(gamepad_is_connected(1)){
        gamepad1Connected = 1;
        gamepad_set_axis_deadzone(1, 0.25);
    }
    else{
        gamepad1Connected = 0;
    }
    
    //option selects
    if((gamepad_button_check_pressed(0, gp_padd)) || (gamepad_button_check_pressed(1, gp_padd)) || (keyboard_check_pressed(vk_down))){
        menuOption += 2;
        if(menuOption &gt; maxMenuOptions){
            menuOption = maxMenuOptions;
        }
    }
    if((gamepad_button_check_pressed(0, gp_padu)) || (gamepad_button_check_pressed(1, gp_padu)) || (keyboard_check_pressed(vk_up))){
        menuOption -= 2;
        if(menuOption &lt; minMenuOptions){
            menuOption = minMenuOptions;
        }
        
    }
    if((gamepad_button_check_pressed(0, gp_padl)) || (gamepad_button_check_pressed(1, gp_padl)) || (keyboard_check_pressed(vk_left))){
        if(menuOption % 2 = 0){
            menuOption -= 1;
        }
        if(menuOption &lt; minMenuOptions){
            menuOption = minMenuOptions;
        }
        
        if(menuOption = 1){
            pointsToWin -= 1;
            if(pointsToWin &lt;= 0){
                pointsToWin = 1;
            }
        }
        if(menuOption = 3){
            levelSelect -= 1;
            if(levelSelect &lt;= 0){
                levelSelect = 1;
            }
        }
        if(menuOption = 5){
            if(instance_exists(obj_Lighting)){
            with(obj_Lighting){
                instance_destroy();
            }
            }
            lightingOn = 0;
        }
    }
    if((gamepad_button_check_pressed(0, gp_padr)) || (gamepad_button_check_pressed(1, gp_padr)) || (keyboard_check_pressed(vk_right))){
        if(menuOption % 2 = 1){
            menuOption += 1;
        }
        if(menuOption &gt; maxMenuOptions){
               menuOption = maxMenuOptions;
        }
        if(menuOption = 2){
            pointsToWin += 1;
        }
        if(menuOption = 4){
            levelSelect += 1;
            if(levelSelect &gt;= 2){
                levelSelect = 2;
            }
        }
        if(menuOption = 6){
            if(!instance_exists(obj_Lighting)){
                instance_create(0,0,obj_Lighting);
        }
            lightingOn = 1;
        }
    }
    //change vars
    if((gamepad_button_check_pressed(0, gp_face3)) || (gamepad_button_check_pressed(1, gp_face3))){
        //points to win
        if(menuOption = 1){
            pointsToWin--;
            if(pointsToWin &lt;= 0){
                pointsToWin = 1;
            }
        }
        if(menuOption = 2){
            pointsToWin++;
        }
    }
}

//Menu ready check
if(levelNumber = 0){
    if(gamepad_button_check_pressed(0, gp_face1)){
        player1Ready = 1;
    }
    if(gamepad_button_check_pressed(0, gp_face2)){
        player1Ready = 0;
    }
    if(gamepad_button_check_pressed(1, gp_face1)){
        player2Ready = 1;
    }
    if(gamepad_button_check_pressed(1, gp_face2)){
        player2Ready = 0;
    }
    if((player1Ready = 1) &amp;&amp; (player2Ready = 1)){
        var levelGoTo = asset_get_index("rm_Level" + string(levelSelect));  
        room_goto(levelGoTo);
        levelNumber = levelSelect;
        obj_Control.x = room_width/2
        obj_Control.y = room_height/2
        timer[| 1]=1000000*10;
        //if(alarm[1]=-1){
            //alarm[1]=75;
        //}
    }
}

//Sets round to end if both players out of ammo and all shots completed
if((player1Shot&lt;=0) &amp;&amp; (player2Shot&lt;=0) &amp;&amp; (instance_number(obj_p1Bullet)=0) &amp;&amp; (instance_number(obj_p2Bullet)=0) &amp;&amp; (gameStart = 1)){
    player1Ready = 0;
    player2Ready = 0;
    gameStart = 0;
}

//Ready Check if round is over
if(gameStart = 0){
    if((p1Score &lt; pointsToWin) &amp;&amp; (p2Score &lt; pointsToWin)){
        if(gamepad_button_check_pressed(0, gp_face1)){
            player1Ready = 1;
        }
        
        if(gamepad_button_check_pressed(0, gp_face2)){
            player1Ready = 0;
        }
        
        if(gamepad_button_check_pressed(1, gp_face1)){
            player2Ready = 1;
        }
        
        if(gamepad_button_check_pressed(1, gp_face2)){
            player2Ready = 0;
        }
        
        if((player1Ready = 1) &amp;&amp; (player2Ready = 1)){
            if(timer[| 0]=-1){
                timer[| 0]=1000000*0.5;
            }
            timer[| 1]=1000000*10;
        }
    }
}

if(shakeOn = 0){
    view_xview = round(((view_xview)*7+cameraTarget.x-(view_wview/2))/8);
    view_yview = round(((view_yview)*7+cameraTarget.y-(view_hview/2))/8);
}
else{
    view_xview += random_range (-3,3);
    view_yview += random_range (-3,3);
}

//Fullscreen 
if ((gamepad_button_check_pressed(0, gp_select)) || gamepad_button_check_pressed(1, gp_select))
{
    if window_get_fullscreen(){
        window_set_fullscreen(false);
    }
    else{
        window_set_fullscreen(true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_yellow);
draw_text(0,0,"fps: "+ string(fps));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw score
//draw_set_colour(c_blue);
//draw_text(obj_Player1.x-6,obj_Player1.y-50,string(p1Score));
//draw_text(obj_Player2.x-6,obj_Player2.y-50,string(p2Score));

//var dispH = display_get_width();
//var dispV = display_get_height();
//draw_text(0,0,string(dispH));
//draw_text(60,0,string(dispV));

// Draw roundTime
if(gameStart = 1){
    draw_text_transformed(room_width/2, room_height/2, string(roundTime), 4, 4, 0);
}

//Player ammo draws
if(player1Shot = 1){
draw_set_colour(c_red);
draw_circle(obj_Player1.x-1, obj_Player1.y-2, 18, 1);
}

if(player2Shot = 1){
draw_set_colour(c_red);
draw_circle(obj_Player2.x-1, obj_Player2.y-2, 18, 1);
}

//Player ready displays
if(gameStart = 0){
    if(levelNumber = 0){
        if(player1Ready = 0){
            draw_set_alpha(0.15);
            draw_set_color(c_red);
            draw_rectangle(736,32,992,288,0);
            draw_set_alpha(1);
        }
        if(player1Ready != 0){
            draw_set_alpha(0.15);
            draw_set_color(c_green);
            draw_rectangle(736,32,992,288,0);
            draw_set_alpha(1);
        }
       
        if(player2Ready = 0){
            draw_set_alpha(0.15);
            draw_set_color(c_red);
            draw_rectangle(736,736,992,992,0);
            draw_set_alpha(1);
        }
        if(player2Ready != 0){
            draw_set_alpha(0.15);
            draw_set_color(c_green);
            draw_rectangle(736,736,992,992,0);
            draw_set_alpha(1);
        }
    }
    else{
        if((p1Score &lt; pointsToWin) &amp;&amp; (p2Score &lt; pointsToWin)){
                if(player1Ready = 0){
                    draw_set_alpha(0.3);
                    draw_set_color(c_red);
                    draw_rectangle(0,0,room_width/2,room_height,0);
                    draw_set_alpha(1);
                   //draw_sprite(spr_notReady,0,(room_width/4),room_height/2)
                }
                if(player1Ready != 0){
                    draw_set_alpha(0.3);
                    draw_set_color(c_green);
                    draw_rectangle(0,0,room_width/2,room_height,0);
                    draw_set_alpha(1);
                    //draw_sprite(spr_Ready,0,(room_width/4),room_height/2)
                }
               
                if(player2Ready = 0){
                    draw_set_alpha(0.3);
                    draw_set_color(c_red);
                    draw_rectangle((room_width/2)+1,0,room_width,room_height,0);
                    draw_set_alpha(1);
                    //draw_sprite(spr_notReady,0,(room_width/4)*3,room_height/2)
                }
                if(player2Ready != 0){
                    draw_set_alpha(0.3);
                    draw_set_color(c_green);
                    draw_rectangle((room_width/2)+1,0,room_width,room_height,0);
                    draw_set_alpha(1);
                    //draw_sprite(spr_Ready,0,(room_width/4)*3,room_height/2)
                }
        }
    
        draw_sprite(spr_P1,0,(room_width/4),(room_height/5)-25);
        draw_sprite(spr_P2,0,(room_width/4)*3,(room_height/5)-25);
        
        if(didP1Score = 1){
            var drawP1Score = asset_get_index("spr_" + string(p1Score));
            draw_sprite_ext(drawP1Score,0,(room_width/4),room_height/2,1,1,0,c_yellow,1);
            var drawP2Score = asset_get_index("spr_" + string(p2Score));
            draw_sprite(drawP2Score,0,(room_width/4)*3,room_height/2);        
        }
        else if(didP2Score = 1){
            var drawP1Score = asset_get_index("spr_" + string(p1Score));
            draw_sprite(drawP1Score,0,(room_width/4),room_height/2);
            var drawP2Score = asset_get_index("spr_" + string(p2Score));
            draw_sprite_ext(drawP2Score,0,(room_width/4)*3,room_height/2,1,1,0,c_yellow,1);
        }
        else{
            var drawP1Score = asset_get_index("spr_" + string(p1Score));
            draw_sprite(drawP1Score,0,(room_width/4),room_height/2);
            var drawP2Score = asset_get_index("spr_" + string(p2Score));
            draw_sprite(drawP2Score,0,(room_width/4)*3,room_height/2);
        }
    }
}   

//Draw menu and options
if(levelNumber = 0){
    draw_set_color(c_black);
    draw_sprite(spr_arrowLeft,0,64,128);
    draw_text(166,80,"Points To Win");
    draw_text(216, 144,string(pointsToWin));
    draw_sprite(spr_arrowRight,0,320,128);
    draw_sprite(spr_arrowLeft,0,64,320);
    draw_text(166,270,"Level");
    if(levelSelect = 1){
        draw_text(216, 338,"Bars");
    }
    if(levelSelect = 2){
        draw_text(216, 338,"Arrows");
    }
    draw_sprite(spr_arrowRight,0,320,320);
    draw_sprite(spr_arrowLeft,0,64,512);
    draw_text(166,464,"Lighting");
    if(lightingOn = 1){
        draw_text(216, 528,"ON");
    }
    else{
        draw_text(216, 528,"OFF");
    }
    draw_sprite(spr_arrowRight,0,320,512);
    
    if(menuOption = 1){
        draw_sprite(spr_arrowLeftS,0,64,128);
    }
    if(menuOption = 2){
        draw_sprite(spr_arrowRightS,0,320,128);
    }
    if(menuOption = 3){
        draw_sprite(spr_arrowLeftS,0,64,320);
    }
    if(menuOption = 4){
        draw_sprite(spr_arrowRightS,0,320,320);
    }
    if(menuOption = 5){
        draw_sprite(spr_arrowLeftS,0,64,512);
    }
    if(menuOption = 6){
        draw_sprite(spr_arrowRightS,0,320,512);
    }
    if(gamepad_is_connected(0)){
        draw_sprite(spr_Controller,0,864,352);
    }
    else{
        draw_sprite(spr_Keyboard,0,864,352);
    }
    if(gamepad_is_connected(1)){
        draw_sprite(spr_Controller,0,864,672);
    }
    else{
        draw_sprite(spr_Keyboard,0,864,672);
    }
    
}

//Draw Winner text
if(room != rm_Lobby){
    if(p1Score &gt;= pointsToWin){
        draw_text((room_width/2)-30,(room_height/2)-10,"P1 WINS");
        draw_text((room_width/2)-137,room_height/2,"Press a shoulder button to leave");
    }
    if(p2Score &gt;= pointsToWin){
        draw_text((room_width/2)-30,(room_height/2)-10,"P2 WINS");
        draw_text((room_width/2)-137,room_height/2,"Press a shoulder button to leave");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(shakeOn = 0){
    shakeOn = 1;
}
else{
    shakeon = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
