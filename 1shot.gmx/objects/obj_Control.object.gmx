<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variable inits
globalvar gameStart, p1Point, p2Point, player1Shot, player2Shot, player1Ready, player2Ready levelNumber, p1Score, p2Score, menuOption;
player1Shot = 0;
player2Shot = 0;
player1Ready = 0;
player2Ready = 0;
p1Point = 0;
p2Point = 0;
p1Score = 0;
p2Score = 0;
levelNumber = 0;
gameStart = 0;
menuOption = 0;
minMenuOptions = 0; //always 0
maxMenuOptions = 6;
//Deadzone (if it works)
if gamepad_is_connected(0) gamepad_set_axis_deadzone(0, 0.25);
if gamepad_is_connected(1) gamepad_set_axis_deadzone(1, 0.25);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Menu button selection var
if((gamepad_button_check_pressed(0, gp_padd)) || (gamepad_button_check_pressed(1, gp_padd))){
    menuOption += 2;
    if(menuOption &gt; maxMenuOptions){
        menuOption = maxMenuOptions;
    }
}
if((gamepad_button_check_pressed(0, gp_padu)) || (gamepad_button_check_pressed(1, gp_padu))){
    menuOption -= 2;
    if(menuOption &gt; minMenuOptions){
        menuOption = minMenuOptions;
    }
}
if((gamepad_button_check_pressed(0, gp_padl)) || (gamepad_button_check_pressed(1, gp_padl))){
    menuOption -= 1;
    if(menuOption &gt; minMenuOptions){
        menuOption = minMenuOptions;
    }
}
if((gamepad_button_check_pressed(0, gp_padr)) || (gamepad_button_check_pressed(1, gp_padr))){
    menuOption += 1;
    if(menuOption &gt; maxMenuOptions){
        menuOption = maxMenuOptions;
    }
}

//Menu ready check
if(levelNumber = 0){
    if((player1Ready = 0) &amp;&amp; (gamepad_button_check_pressed(0, gp_face1))){
        player1Ready = 1;
    }
    
    if((player2Ready = 0) &amp;&amp; (gamepad_button_check_pressed(1, gp_face1))){
        player2Ready = 1;
    }
    
    if((player1Ready = 1) &amp;&amp; (player2Ready = 1)){
     levelNumber = 1;
     room_goto(rm_Level1);
    }
}

//Sets round to end if both players out of ammo and all shots completed
if((player1Shot&lt;=0) &amp;&amp; (player2Shot&lt;=0) &amp;&amp; (instance_number(obj_p1Bullet)=0) &amp;&amp; (instance_number(obj_p2Bullet)=0) &amp;&amp; (gameStart = 1)){
    player1Ready = 0;
    player2Ready = 0;
    gameStart = 0;
}

//Ready Check if round is over
if(gameStart = 0){

    if((player1Ready = 0) &amp;&amp; (gamepad_button_check_pressed(0, gp_face1))){
        player1Ready = 1;
    }
    
    if((player2Ready = 0) &amp;&amp; (gamepad_button_check_pressed(1, gp_face1))){
        player2Ready = 1;
    }
    
    if((player1Ready = 1) &amp;&amp; (player2Ready = 1)){
        instance_create(x,y,obj_levelRules)
    }
}

//Fullscreen 
if ((gamepad_button_check_pressed(0, gp_select)) || gamepad_button_check_pressed(1, gp_select))
{
    if window_get_fullscreen(){
        window_set_fullscreen(false);
    }
    else{
        window_set_fullscreen(true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw score
draw_set_colour(c_blue);
draw_text(obj_Player1.x-6,obj_Player1.y-40,string(p1Score));
draw_text(obj_Player2.x-6,obj_Player2.y-40,string(p2Score));

//Player ammo draws
if(player1Shot = 1){
draw_set_colour(c_red);
draw_circle(obj_Player1.x-1, obj_Player1.y-1, 18, 1);
}

if(player2Shot = 1){
draw_set_colour(c_red);
draw_circle(obj_Player2.x-1, obj_Player2.y-1, 18, 1);
}

//Player ready displays
if(gameStart = 0){
    if(player1Ready = 0){
        draw_sprite(spr_notReady,0,obj_Player1.x,obj_Player1.y)
     }
    if(player1Ready != 0){
          draw_sprite(spr_Ready,0,obj_Player1.x,obj_Player1.y)
     }
   
    if(player2Ready = 0){
      draw_sprite(spr_notReady,0,obj_Player2.x,obj_Player2.y)
    }
    if(player2Ready != 0){
     draw_sprite(spr_Ready,0,obj_Player2.x,obj_Player2.y)
     }
}

//Draw menu and options
draw_sprite(spr_arrowLeft,0,32,64);
draw_sprite(spr_arrowRight,0,160,64);
draw_sprite(spr_arrowLeft,0,32,160);
draw_sprite(spr_arrowRight,0,160,160);
draw_sprite(spr_arrowLeft,0,32,256);
draw_sprite(spr_arrowRight,0,160,256);

if(menuOption = 1){
    draw_sprite(spr_arrowLeftS,0,32,64);
}
if(menuOption = 2){
    draw_sprite(spr_arrowRightS,0,160,64);
}
if(menuOption = 3){
    draw_sprite(spr_arrowLeftS,0,32,160);
}
if(menuOption = 4){
    draw_sprite(spr_arrowRightS,0,160,160);
}
if(menuOption = 5){
    draw_sprite(spr_arrowLeftS,0,32,256);
}
if(menuOption = 6){
    draw_sprite(spr_arrowRightS,0,160,256);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
