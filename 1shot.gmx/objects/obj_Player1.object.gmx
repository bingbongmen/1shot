<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//basic player var inits
var haxis = 0;
var vaxis = 0;
var hpoint = 0;
var vpoint = 0;
var hspd = 0;
var vspd = 0;
sprite_index = spr_Player1;


//timers
timer = ds_list_create();
ds_list_add(timer,-1);

//Points player to enemy (doesn't work)
image_angle = point_direction(0,0,obj_Player2.x,obj_Player2.y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i=0; i&lt;ds_list_size(timer); i++)
{
    if(timer[| i]&gt;0)
    {
        timer[| i] -= delta_time;
        if(timer[| i]&lt;0)
        {
            timer[| i] = 0;
        }
    }
}
if (timer[| 0]==0)
{
    shakeOn = 0;
    gamepad_set_vibration(0, 0, 0);
    timer[| 0]= -1;
}

//controller stick vars
haxis = gamepad_axis_value(0, gp_axislh);
vaxis = gamepad_axis_value(0, gp_axislv);
hpoint = gamepad_axis_value(0, gp_axisrh);
vpoint = gamepad_axis_value(0, gp_axisrv);
hpointSave = 0;
vpointSave = 0;
hspd = 0;
vspd = 0;

if(gamepad0Connected = 1){
    //player speed set from stick vars
    hspd = haxis*4.0;
    vspd = vaxis*4.0;
    
    //Player shoot
    if((gamepad_button_check_pressed(0, gp_shoulderrb)) || (gamepad_button_check_pressed(0, gp_shoulderlb))){
        if((player1Shot &gt; 0))
        {
            audio_play_sound(sound_shot,100,false);
            instance_create(obj_Player1.x,obj_Player1.y,obj_p1Bullet);
            player1Shot--;
        }
    }
    
    //Image rotation keeping
    if(hpoint !=0){
        hpointSave = hpoint;
    }
    if(hpoint=0){
        hpoint = hpointSave;
    }
    if(vpoint !=0){
        vpointSave = vpoint;
    }
    if(vpoint=0){
        vpoint = vpointSave;
    }
    if(hpoint!=0 || vpoint!=0){
        image_angle = point_direction(0, 0, hpoint, vpoint);
    }
}
else{
    //movement
    if keyboard_check(ord('W')){
        vspd = -3;
    }
    if keyboard_check(ord('S')){
        vspd = 3;
    }
    if keyboard_check(ord('D')){
        hspd = 3;
    }
    if keyboard_check(ord('A')){
        hspd = -3;
    }
    //direction
    if keyboard_check_pressed(vk_numpad6){
        image_angle = 0;
    }
    if keyboard_check_pressed(vk_numpad9){
        image_angle = 45;
    }
    if keyboard_check_pressed(vk_numpad8){
        image_angle = 90;
    }
    if keyboard_check_pressed(vk_numpad7){
        image_angle = 135;
    }
    if keyboard_check_pressed(vk_numpad4){
        image_angle = 180;
    }
    if keyboard_check_pressed(vk_numpad1){
        image_angle = 225;
    }
    if keyboard_check_pressed(vk_numpad2){
        image_angle = 270;
    }
    if keyboard_check_pressed(vk_numpad3){
        image_angle = 315;
    }
    if keyboard_check_pressed(vk_space){
        if((player1Shot &gt; 0))
        {
            audio_play_sound(sound_shot,100,false);
            instance_create(obj_Player1.x,obj_Player1.y,obj_p1Bullet);
            player1Shot--;
        }
    }
    if keyboard_check_pressed(vk_enter){
        if(gameStart = 0){
            readyLevel += 1;
            var readySound = asset_get_index("sound_Ready" + string(readyLevel));
            audio_play_sound(readySound,100,0);
            player1Ready = 1;
        }
    }
}
hspd =hspd*delta_time*150/1000000;
vspd =vspd*delta_time*150/1000000;
//Wall CC
if(place_meeting(x+hspd, y, obj_Wall)){
    var i=0;  
    while(!place_meeting(x+sign(hspd), y, obj_Wall)&amp;&amp;(i&lt;abs(hspd))){
        x += sign(hspd);
        i++;
    }
    hspd = 0;
}

x += hspd;

if(place_meeting(x, y+vspd, obj_Wall)){
    var i=0;
    while(!place_meeting(x, y+sign(vspd), obj_Wall)&amp;&amp;(i&lt;abs(vspd))){
        y+= sign(vspd);
        i++;
    }
    vspd = 0;
}

y += vspd;

if(levelNumber = 0){
    sprite_index = spr_Player1;
}

//Saves P1s point direct
global.p1Point = image_angle;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_p2Bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gameStart = 1){
    readyLevel = 0;
    var readySound = asset_get_index("sound_Ready" + string(readyLevel));
    audio_play_sound(readySound,100,0);
    timer[| 0]=0.2*1000000;
    gamepad_set_vibration(0, 1, 1);
    shakeOn = 1;
    sprite_index = spr_Invisible;
    didP2Score = 1;
    var count = random_range(40, 70);
    for (var i = 0; i &lt; count; i++) {
        instance_create(obj_Player1.x + random_range(-8, 8), obj_Player1.y + random_range(-8, 8), obj_Blood);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
